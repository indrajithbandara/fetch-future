{"version":3,"sources":["../src/index.js"],"names":["const","fetchF","Future","input","options","reject","resolve","response","let","keys","all","headers","request","getAllResponseHeaders","split","filter","Boolean","reduce","acc","curr","headerPair","indexOf","ok","of","status","statusText","url","responseURL","clone","text","responseText","json","JSON","parse","xml","responseXML","blob","Blob","entries","get","n","toLowerCase","has","XMLHttpRequest","open","method","i","setRequestHeader","withCredentials","credentials","onload","onerror","send","body","abort"],"mappings":"wMAAOA,GAAMC,GAAS,SAAAC,GAAO,MAAG,UAACC,EAAOC,GACtC,0BAAO,GAAIF,GAAO,SAACG,EAAQC,GACzB,YAgBA,SAASC,KACPC,GAAIC,MACAC,KACAC,IAoBJ,OAlBAC,GAAQC,wBACLC,MAAM,QACNC,OAAOC,SACPC,OAAO,SAACC,EAAKC,GACZnB,GAAMoB,GAAaD,CAGnBnB,OAAcoB,GAAWC,QAAQ,OAUhCV,IAEHW,GAAIpB,EAAOqB,GAAkC,IAA9BX,EAAQY,OAAS,IAAM,IAEtCA,OAAQtB,EAAOqB,GAAGX,EAAQY,QAC1BC,WAAYvB,EAAOqB,GAAGX,EAAQa,YAC9BC,IAAKxB,EAAOqB,GAAGX,EAAQe,aACvBC,MAAO1B,EAAOqB,GAAGhB,GACjBsB,KAAM3B,EAAOqB,GAAGX,EAAQkB,cACxBC,KAAM7B,EAAOqB,GAAGS,KAAKC,MAAMrB,EAAQkB,eACnCI,IAAKhC,EAAOqB,GAAGX,EAAQuB,aACvBC,KAAMlC,EAAOqB,GAAG,GAAIc,OAAMzB,EAAQL,YAClCI,SACEF,KAAMP,EAAOqB,GAAGd,GAChB6B,QAASpC,EAAOqB,GAAGb,GACnB6B,IAAK,SAAAC,GAAE,MAAGtC,GAAOqB,GAAGZ,EAAQ6B,EAAEC,iBAC9BC,IAAK,SAAAF,GAAE,MAAGtC,GAAOqB,GAAGiB,EAAEC,eAAiB9B,OArD7CX,GAAMY,GAAU,GAAI+B,gBACdjB,EAAMvB,CACZS,GAAQgC,KAAKxC,EAAQyC,QAAU,MAAOnB,EAEtC,KAAKlB,GAAIsC,KAAK1C,GAAQO,QACpBC,EAAQmC,iBAAiBD,EAAG1C,EAAQO,QAAQmC,GAQ9C,OALAlC,GAAQoC,gBAA0C,YAAxB5C,EAAQ6C,YAClCrC,EAAQsC,OAAS,WAAG,MAAG5C,GAAQC,MAC/BK,EAAQuC,QAAU9C,EAClBO,EAAQwC,KAAKhD,EAAQiD,MAEd,WAAG,MAAGzC,GAAQ0C","file":"fetch-future.umd.js","sourcesContent":["export const fetchF = Future => (input, options = {}) => {\n  return new Future((reject, resolve) => {\n    'use strict'\n    const request = new XMLHttpRequest()\n    const url = input\n    request.open(options.method || 'get', url)\n\n    for (let i in options.headers) {\n      request.setRequestHeader(i, options.headers[i])\n    }\n\n    request.withCredentials = options.credentials === 'include'\n    request.onload = () => resolve(response())\n    request.onerror = reject\n    request.send(options.body)\n\n    return () => request.abort()\n\n    function response () {\n      let keys = []\n      let all = []\n      let headers = {}\n      let header\n      request.getAllResponseHeaders()\n        .split('\\u000d\\u000a')\n        .filter(Boolean)\n        .reduce((acc, curr) => {\n          const headerPair = curr\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const index = headerPair.indexOf('\\u003a\\u0020')\n          if (index > 0) {\n            let key = headerPair.substring(0, index)\n            const value = headerPair.substring(index + 2)\n\n            keys.push(key = key.toLowerCase())\n            all.push([key, value])\n            header = headers[key]\n            headers[key] = header ? `${header},${value}` : value\n          }\n        }, headers)\n      return {\n        ok: Future.of((request.status / 200 | 0) === 1),\n        // 200-399\n        status: Future.of(request.status),\n        statusText: Future.of(request.statusText),\n        url: Future.of(request.responseURL),\n        clone: Future.of(response),\n        text: Future.of(request.responseText),\n        json: Future.of(JSON.parse(request.responseText)),\n        xml: Future.of(request.responseXML),\n        blob: Future.of(new Blob([request.response])),\n        headers: {\n          keys: Future.of(keys),\n          entries: Future.of(all),\n          get: n => Future.of(headers[n.toLowerCase()]),\n          has: n => Future.of(n.toLowerCase() in headers)\n        }\n      }\n    }\n  })\n}\n"]}