{"version":3,"sources":["../src/index.js"],"names":["const","fetchF","Future","input","options","reject","resolve","response","let","header","keys","all","headers","request","getAllResponseHeaders","split","filter","Boolean","reduce","acc","curr","headerPair","indexOf","index","key","substring","value","push","toLowerCase","ok","of","status","abort","cancel","statusText","url","responseURL","clone","text","responseText","json","JSON","parse","xml","responseXML","blob","Blob","entries","get","n","has","XMLHttpRequest","open","method","i","setRequestHeader","withCredentials","credentials","onload","onerror","send","body"],"mappings":"sDAAOA,IAAMC,GAAS,SAAAC,GAAO,MAAG,UAAUC,EAAOC,GAC/C,0BAAO,GAAIF,GAAO,SAACG,EAAQC,GACzB,YAgBA,SAASC,KACPC,GAGIC,GAHAC,KACAC,KACAC,IAoBJ,OAlBAC,GAAQC,wBACLC,MAAM,QACNC,OAAOC,SACPC,OAAO,SAACC,EAAKC,GACZpB,GAAMqB,GAAaD,CAInB,IADApB,OAAAA,QAAcqB,EAAWC,QAAQ,MAC7BC,MAAQ,EAAG,CACbf,GAAIgB,GAAMH,EAAWI,UAAU,EAAGF,OAC5BG,EAAQL,EAAWI,UAAUF,MAAQ,EAE3Cb,GAAKiB,KAAKH,EAAMA,EAAII,eACpBjB,EAAIgB,MAAMH,EAAKE,IACfjB,EAASG,EAAQY,GACjBZ,EAAQY,GAAOf,EAASA,EAAS,IAAIiB,EAAUA,IAEhDd,IAEHiB,GAAI3B,EAAO4B,GAAkC,IAA9BjB,EAAQkB,OAAS,IAAM,IACtCC,MAAOC,EAEPF,OAAQ7B,EAAO4B,GAAGjB,EAAQkB,QAC1BG,WAAYhC,EAAO4B,GAAGjB,EAAQqB,YAC9BC,IAAKjC,EAAO4B,GAAGjB,EAAQuB,aACvBC,MAAOnC,EAAO4B,GAAGvB,GACjB+B,KAAMpC,EAAO4B,GAAGjB,EAAQ0B,cACxBC,KAAMtC,EAAO4B,GAAGW,KAAKC,MAAM7B,EAAQ0B,eACnCI,IAAKzC,EAAO4B,GAAGjB,EAAQ+B,aACvBC,KAAM3C,EAAO4B,GAAG,GAAIgB,OAAMjC,EAAQN,YAClCK,SACEF,KAAMR,EAAO4B,GAAGpB,GAChBqC,QAAS7C,EAAO4B,GAAGnB,GACnBqC,IAAK,SAAAC,GAAE,MAAG/C,GAAO4B,GAAGlB,EAAQqC,EAAErB,iBAC9BsB,IAAK,SAAAD,GAAE,MAAG/C,GAAO4B,GAAGmB,EAAErB,eAAiBhB,OAtD7CZ,GAAMa,GAAU,GAAIsC,gBACdhB,EAAMhC,CACZU,GAAQuC,KAAKhD,EAAQiD,QAAU,MAAOlB,EAEtC,KAAK3B,GAAI8C,KAAKlD,GAAQQ,QACpBC,EAAQ0C,iBAAiBD,EAAGlD,EAAQQ,QAAQ0C,GAG9CzC,GAAQ2C,gBAA0C,YAAxBpD,EAAQqD,YAClC5C,EAAQ6C,OAAS,WAAG,MAAGpD,GAAQC,MAC/BM,EAAQ8C,QAAUtD,EAClBQ,EAAQ+C,KAAKxD,EAAQyD,KAErB7D,IAAMiC,GAAS,WAAG,MAAGpB,GAAQmB","file":"fetch-future.js","sourcesContent":["export const fetchF = Future => function (input, options = {}) {\n  return new Future((reject, resolve) => {\n    'use strict'\n    const request = new XMLHttpRequest()\n    const url = input\n    request.open(options.method || 'get', url)\n\n    for (let i in options.headers) {\n      request.setRequestHeader(i, options.headers[i])\n    }\n\n    request.withCredentials = options.credentials === 'include'\n    request.onload = () => resolve(response())\n    request.onerror = reject\n    request.send(options.body)\n\n    const cancel = () => request.abort()\n\n    function response () {\n      let keys = []\n      let all = []\n      let headers = {}\n      let header\n      request.getAllResponseHeaders()\n        .split('\\u000d\\u000a')\n        .filter(Boolean)\n        .reduce((acc, curr) => {\n          const headerPair = curr\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const index = headerPair.indexOf('\\u003a\\u0020')\n          if (index > 0) {\n            let key = headerPair.substring(0, index)\n            const value = headerPair.substring(index + 2)\n\n            keys.push(key = key.toLowerCase())\n            all.push([key, value])\n            header = headers[key]\n            headers[key] = header ? `${header},${value}` : value\n          }\n        }, headers)\n      return {\n        ok: Future.of((request.status / 200 | 0) === 1),\n        abort: cancel,\n        // 200-399\n        status: Future.of(request.status),\n        statusText: Future.of(request.statusText),\n        url: Future.of(request.responseURL),\n        clone: Future.of(response),\n        text: Future.of(request.responseText),\n        json: Future.of(JSON.parse(request.responseText)),\n        xml: Future.of(request.responseXML),\n        blob: Future.of(new Blob([request.response])),\n        headers: {\n          keys: Future.of(keys),\n          entries: Future.of(all),\n          get: n => Future.of(headers[n.toLowerCase()]),\n          has: n => Future.of(n.toLowerCase() in headers)\n        }\n      }\n    }\n  })\n}\n"]}